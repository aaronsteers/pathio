# Instructions:
#
# 1. Save this file as `{root}/.github/workflows/cicd.yml`.
# 2. Set the `PYPI_USER` and `PYPI_PASS` secrets in your GitHub CI config.
# 3. Update the `PYPACKAGE_NAME` declaration to the name you want to use in PyPi.
#
# Public Gist: https://gist.github.com/aaronsteers/f3eec4db94d3db1de78b76b3318e9e33

name: Python CI/CD
env:
  PYPACKAGE_NAME: uio
on:
  push:
    branches:
      - "**"
    paths-ignore:
      - docs/**.md
jobs:
  python_build_and_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - 3.7
          - 3.8
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipx and poetry
        run: |
          python3 -m pip install pipx
          python3 -m pipx ensurepath
          pipx install poetry
      - name: Install package using poetry
        run: |
          poetry install
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     #poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  pypi_publish:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - 3.7
    needs:
      - python_build_and_test
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: Set up Python (v${{ matrix.python-version }})
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipx and poetry
        run: |
          python3 -m pip install pipx
          python3 -m pipx ensurepath
          pipx install poetry
      - name: Push to PyPi (build number ${{ github.run_number }})
        env:
          BRANCH_NAME: ${{ github.ref }}
          PYPI_USER: ${{ secrets.PYPI_USER }}
          PYPI_PASS: ${{ secrets.PYPI_SECRET }}
        run: |
          if [[ "$BRANCH_NAME" == *master ]]
          then
            poetry version --short
          else
            poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
            poetry version --short
          fi
          echo -e "\nPublishing to version ref '$(poetry version --short)'...\n\n"
          poetry config http-basic.pypi $PYPI_USER $PYPI_PASS
          poetry publish --build
      - name: Wait up to 3 minutes for PyPi availability
        run: |
          pwd
          ls -la
          export VER=$(poetry version --short)
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          echo "Checking for PyPi availability of version $VER"
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
          export PIPERR=$(pip install $PYPACKAGE_NAME==$VER 2>&1)
          if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not found. Giving up. Last message from PyPi was $PIPERR"; exit 1; } fi;
